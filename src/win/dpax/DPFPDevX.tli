// Created by Microsoft (R) C/C++ Compiler Version 14.16.27032.1 (9458f152).
//
// Wrapper implementations for Win32 type library C:\\Program Files (x86)\\DigitalPersona\\Bin\\COM-ActiveX\\DPFPDevX.dll
// compiler-generated file created 08/19/19 at 07:00:47 - DO NOT EDIT!

#pragma once

//
// interface IDPFPReaderDescription wrapper method implementations
//

inline _bstr_t IDPFPReaderDescription::GetSerialNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SerialNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline enum DPFPReaderSerialNumberTypeEnum IDPFPReaderDescription::GetSerialNumberType ( ) {
    enum DPFPReaderSerialNumberTypeEnum _result;
    HRESULT _hr = get_SerialNumberType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum DPFPReaderImpressionTypeEnum IDPFPReaderDescription::GetImpressionType ( ) {
    enum DPFPReaderImpressionTypeEnum _result;
    HRESULT _hr = get_ImpressionType(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline enum DPFPReaderTechnologyEnum IDPFPReaderDescription::GetTechnology ( ) {
    enum DPFPReaderTechnologyEnum _result;
    HRESULT _hr = get_Technology(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IDPFPReaderDescription::GetLanguageID ( ) {
    long _result = 0;
    HRESULT _hr = get_LanguageID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IDPFPReaderDescription::GetVendor ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Vendor(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IDPFPReaderDescription::GetProductName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ProductName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IDPFPReaderDescription::GetHardwareRevision ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_HardwareRevision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IDPFPReaderDescription::GetFirmwareRevision ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FirmwareRevision(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IDPFPReadersCollection wrapper method implementations
//

inline long IDPFPReadersCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IDPFPReadersCollection::Reader ( _bstr_t ReaderSerialNumber ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Reader(ReaderSerialNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IDPFPReadersCollection::GetItem ( long lDevice ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Item(lDevice, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IDPFPReadersCollection::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IDPFPCapture wrapper method implementations
//

inline HRESULT IDPFPCapture::StartCapture ( ) {
    HRESULT _hr = raw_StartCapture();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IDPFPCapture::StopCapture ( ) {
    HRESULT _hr = raw_StopCapture();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IDPFPCapture::GetReaderSerialNumber ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReaderSerialNumber(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDPFPCapture::PutReaderSerialNumber ( _bstr_t pVal ) {
    HRESULT _hr = put_ReaderSerialNumber(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline enum DPFPCapturePriorityEnum IDPFPCapture::GetPriority ( ) {
    enum DPFPCapturePriorityEnum _result;
    HRESULT _hr = get_Priority(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDPFPCapture::PutPriority ( enum DPFPCapturePriorityEnum pVal ) {
    HRESULT _hr = put_Priority(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDPFPSampleConversion wrapper method implementations
//

inline IDispatchPtr IDPFPSampleConversion::ConvertToPicture ( IDispatch * pSample ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_ConvertToPicture(pSample, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _variant_t IDPFPSampleConversion::ConvertToANSI381 ( IDispatch * pSample ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_ConvertToANSI381(pSample, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

//
// dispinterface _IDPFPCaptureEvents wrapper method implementations
//

inline HRESULT _IDPFPCaptureEvents::OnComplete ( _bstr_t ReaderSerNum, IDispatch * pSample ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x1, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008\x0009", (BSTR)ReaderSerNum, pSample);
    return _result;
}

inline HRESULT _IDPFPCaptureEvents::OnReaderDisconnect ( _bstr_t ReaderSerNum ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x2, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)ReaderSerNum);
    return _result;
}

inline HRESULT _IDPFPCaptureEvents::OnReaderConnect ( _bstr_t ReaderSerNum ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x3, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)ReaderSerNum);
    return _result;
}

inline HRESULT _IDPFPCaptureEvents::OnFingerTouch ( _bstr_t ReaderSerNum ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x4, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)ReaderSerNum);
    return _result;
}

inline HRESULT _IDPFPCaptureEvents::OnFingerGone ( _bstr_t ReaderSerNum ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x5, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008", (BSTR)ReaderSerNum);
    return _result;
}

inline HRESULT _IDPFPCaptureEvents::OnSampleQuality ( _bstr_t ReaderSerNum, enum DPFPCaptureFeedbackEnum CaptureFeedback ) {
    HRESULT _result = 0;
    _com_dispatch_method(this, 0x6, DISPATCH_METHOD, VT_ERROR, (void*)&_result, 
        L"\x0008\x0003", (BSTR)ReaderSerNum, CaptureFeedback);
    return _result;
}
